esphome:
  name: epaper-panel
  friendly_name: ePaper Panel
  on_boot:
    priority: -100
    then:
      - wait_until:
          condition:
            lambda: |-
              return id(living_room_temperature).has_state() ||
                     id(living_room_humidity).has_state() ||
                     id(weather_summary).has_state();
          timeout: 30s
      - script.execute: refresh_display_and_sleep

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "5i4azvXNTvFw31YkZK22aQnOsbzA51b5+PvZBq8T9M8="

ota:
  - platform: esphome
    password: "84622fc91e2dce7290ce38cc33e68251"

deep_sleep:
  id: deep_sleep_ctrl
  sleep_duration: 10min

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Epaper-Panel Fallback Hotspot"
    password: "OZrb7lk6llkP"

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time

font:
  - file: "gfonts://Roboto"
    id: font_large
    size: 48
  - file: "gfonts://Roboto"
    id: font_medium
    size: 32
  - file: "gfonts://Roboto"
    id: font_small
    size: 24

sensor:
  - platform: homeassistant
    entity_id: sensor.living_room_temperature
    id: living_room_temperature
    on_value:
      then:
        - script.execute: refresh_display_and_sleep
  - platform: homeassistant
    entity_id: sensor.living_room_humidity
    id: living_room_humidity
    on_value:
      then:
        - script.execute: refresh_display_and_sleep

text_sensor:
  - platform: homeassistant
    entity_id: weather.home
    id: weather_summary
    on_value:
      then:
        - script.execute: refresh_display_and_sleep

script:
  - id: refresh_display_and_sleep
    mode: restart
    then:
      - component.update: main_display
      - delay: 10s
      - deep_sleep.enter: deep_sleep_ctrl

spi:
  clk_pin: GPIO8
  mosi_pin: GPIO10

display:
  - platform: waveshare_epaper
    id: main_display
    cs_pin: GPIO3
    dc_pin: GPIO5
    busy_pin:
      number: GPIO4
      inverted: true
    reset_pin: GPIO2
    model: 7.50inv2
    update_interval: never
    lambda: |-
      it.fill(esphome::display::COLOR_OFF);

      it.printf(20, 40, id(font_medium), "Living Room");

      if (!isnan(id(living_room_temperature).state)) {
        it.printf(20, 120, id(font_large), "%.1f°C", id(living_room_temperature).state);
      } else {
        it.printf(20, 120, id(font_large), "--.-°C");
      }

      if (!isnan(id(living_room_humidity).state)) {
        it.printf(20, 200, id(font_medium), "Humidity: %.0f%%", id(living_room_humidity).state);
      } else {
        it.printf(20, 200, id(font_medium), "Humidity: --%%");
      }

      if (id(weather_summary).has_state()) {
        it.printf(20, 280, id(font_medium), "%s", id(weather_summary).state.c_str());
      } else {
        it.printf(20, 280, id(font_medium), "Weather data unavailable");
      }

      if (id(homeassistant_time).now().is_valid()) {
        it.strftime(780, 40, id(font_small), esphome::display::TextAlign::TOP_RIGHT, "%a %d %b", id(homeassistant_time).now());
        it.strftime(780, 90, id(font_large), esphome::display::TextAlign::TOP_RIGHT, "%H:%M", id(homeassistant_time).now());
      }
